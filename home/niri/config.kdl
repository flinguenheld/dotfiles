// ░░░░░   █▄▀ █▀▀ █▄█ █▄▄ █ █▄░█ █▀▄ █▀   ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ░░░░░   █░█ ██▄ ░█░ █▄█ █ █░▀█ █▄▀ ▄█   ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

binds {
    // Keys consist of modifiers separated by + signs, followed by an XKB key name
    // in the end. To find an XKB name for a particular key, you may use a program
    // like wev.
    //
    // "Mod" is a special modifier equal to Super when running on a TTY, and to Alt
    // when running as a winit window.
    //
    // Most actions that you can bind here can also be invoked programmatically with
    // `niri msg action do-something`.

    // Shows a list of important hotkeys with "?".
    Mod+Shift+slash { show-hotkey-overlay; }

    // Suggested binds for running programs: terminal, app launcher, screen locker.
    Mod+Return     hotkey-overlay-title="Open terminal"                          { spawn "alacritty"; }
    Mod+B          hotkey-overlay-title="Open browser"                           { spawn "firefox"; }
    Mod+Ctrl+B     hotkey-overlay-title="Open browser private"                   { spawn "firefox" "--private-window"; }
    Mod+Alt+B      hotkey-overlay-title="Webpage menu"                           { spawn "~/.config/niri/scripts/firefox_menu"; }

    Mod+V          hotkey-overlay-title="Clipboard history"                      { spawn "~/.config/niri/scripts/clipboard_history"; }
    Mod+D          hotkey-overlay-title="Drun (fuzzer)"                          { spawn "fuzzel"; }
    Mod+T          hotkey-overlay-title="Select theme"                           { spawn "~/.config/niri/scripts/theme_menu"; }
    Mod+Ctrl+P     hotkey-overlay-title="Power menu"                             { spawn "~/.config/niri/scripts/power_menu"; }

    Mod+P          hotkey-overlay-title="Focus the previous focussed windows"    { focus-window-previous; }
    Mod+Alt+W      hotkey-overlay-title="Focus WordReference"                    { spawn "~/.config/niri/scripts/focus_window" "wordreference" "firefox"; }
    Mod+Alt+T      hotkey-overlay-title="Focus Thunderbird"                      { spawn "~/.config/niri/scripts/focus_window" "thunderbird" "thunderbird"; }
    Mod+Alt+D      hotkey-overlay-title="Focus Discord"                          { spawn "~/.config/niri/scripts/focus_window" "discord" "vesktop"; }
    Mod+Alt+Y      hotkey-overlay-title="Focus Youtube"                          { spawn "~/.config/niri/scripts/focus_window" "youtube" "firefox"; }
    Mod+Alt+H      hotkey-overlay-title="Focus Helix"                            { spawn "~/.config/niri/scripts/focus_window" "hx " "alacritty"; }

    Mod+Ctrl+Alt+Shift+R hotkey-overlay-title="Refresh config & restart bar, idle, bg" { spawn "bash" "-c" "notify-send 'Up niri config & waybar   󱍢' && ~/.config/niri/scripts/combine_niri_config && ~/.config/niri/scripts/startup &"; }

    Mod+S          hotkey-overlay-title="Sound menu"        { spawn "~/.config/niri/scripts/sound_menu"; }
    Mod+Ctrl+S     hotkey-overlay-title="Screenshot"        { screenshot; }
    Mod+Alt+S      hotkey-overlay-title="Color picker"      { spawn "~/.config/niri/scripts/colorpicker"; }
    // Mod+Ctrl+S { screenshot-screen; }
    // Alt+Print { screenshot-window; }

    // Example volume keys mappings for PipeWire & WirePlumber.
    // The allow-when-locked=true property makes them work even when the session is locked.
    XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
    XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }

    Mod+Left  { focus-column-left; }
    Mod+Down  { focus-window-down; }
    Mod+Up    { focus-window-up; }
    Mod+Right { focus-column-right; }
    Mod+Home  { focus-column-first; }
    Mod+End   { focus-column-last; }

    Mod+Ctrl+Left  { move-column-left; }
    Mod+Ctrl+Down  { move-window-down; }
    Mod+Ctrl+Up    { move-window-up; }
    Mod+Ctrl+Right { move-column-right; }
    Mod+Ctrl+Home  { move-column-to-first; }
    Mod+Ctrl+End   { move-column-to-last; }

    Mod+Shift+Left  { focus-monitor-left; }
    Mod+Shift+Down  { focus-monitor-down; }
    Mod+Shift+Up    { focus-monitor-up; }
    Mod+Shift+Right { focus-monitor-right; }

    Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }

    // Mod+Shift+Ctrl+Left  { move-window-to-monitor-left; }

    Mod+Shift+Ctrl+Alt+Left  { move-workspace-to-monitor-left; }
    Mod+Shift+Ctrl+Alt+Right { move-workspace-to-monitor-right; }
    Mod+Shift+Ctrl+Alt+Up    { move-workspace-to-monitor-up; }
    Mod+Shift+Ctrl+Alt+Down  { move-workspace-to-monitor-down; }

    Mod+Page_Down      { focus-workspace-up; }
    Mod+Page_Up        { focus-workspace-down; }

    Mod+Ctrl+Page_Down { move-column-to-workspace-up; }
    Mod+Ctrl+Page_Up   { move-column-to-workspace-down; }

    // Mod+Ctrl+Page_Down { move-window-to-workspace-down; }
    Mod+Alt+Ctrl+Page_Down { move-workspace-up; }
    Mod+Alt+Ctrl+Page_Up   { move-workspace-down; }

    // --
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }

    Mod+Ctrl+1 { move-column-to-workspace 1; }
    Mod+Ctrl+2 { move-column-to-workspace 2; }
    Mod+Ctrl+3 { move-column-to-workspace 3; }
    Mod+Ctrl+4 { move-column-to-workspace 4; }
    Mod+Ctrl+5 { move-column-to-workspace 5; }
    Mod+Ctrl+6 { move-column-to-workspace 6; }
    Mod+Ctrl+7 { move-column-to-workspace 7; }
    Mod+Ctrl+8 { move-column-to-workspace 8; }
    Mod+Ctrl+9 { move-column-to-workspace 9; }

    // --
    // Mod+E       { consume-window-into-column; }
    // Mod+Shift+E { expel-window-from-column; }

    // There are also commands that consume or expel a single window to the side.
    // Mod+BracketLeft  { consume-or-expel-window-left; }
    // Mod+BracketRight { consume-or-expel-window-right; }
    // Mod+Shift+9  { consume-or-expel-window-left; } // (
    // Mod+Shift+0 { consume-or-expel-window-right; } // )
    Mod+Alt+Ctrl+Left  { consume-or-expel-window-left; } // (
    Mod+Alt+Ctrl+Right { consume-or-expel-window-right; } // )

    Mod+R          { switch-preset-column-width; }
    Mod+Ctrl+R     { set-column-width "50%"; }
    Mod+Alt+R      { switch-preset-window-height; }
    Mod+Alt+Ctrl+R { set-window-height "100%"; }

    Mod+Equal       { set-column-width "50%"; }
    Mod+Shift+Equal { set-column-width "+10%"; }
    Mod+Minus       { set-column-width "-10%"; }

    Mod+Alt+Equal       { set-window-height "100%"; }
    Mod+Alt+Shift+Equal { set-window-height "+10%"; }
    Mod+Alt+Minus       { set-window-height "-10%"; }

    // --
    Mod+O { toggle-overview; }
    Mod+Ctrl+Q { close-window; }

    Mod+F       { maximize-column; }
    Mod+Alt+F   { fullscreen-window; }
    Mod+Ctrl+F  { toggle-windowed-fullscreen; }
    Mod+C       { center-column; }

    // The quit action will show a confirmation dialog to avoid accidental exits.
    // Mod+Shift+E { quit; }

    // Powers off the monitors. To turn them back on, do any input like
    // moving the mouse or pressing any other key.
    Mod+Shift+P { power-off-monitors; }

    // Mod+N { toggle-window-floating; }
    // Mod+Shift+N { switch-focus-between-floating-and-tiling; }
}

// ░░░░░   █ █▄░█ █▀█ █░█ ▀█▀   ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ░░░░░   █ █░▀█ █▀▀ █▄█ ░█░   ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

input {
    keyboard {
        xkb {
            // For example:
            // layout "us,ru"
            // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"
            layout "us"
            variant "altgr-intl"

        }
    }

    // Next sections include libinput settings.
    // Omitting settings disables them, or leaves them at their default values.
    touchpad {
        // off
        tap
        // dwt
        // dwtp
        natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "two-finger"
        // disabled-on-external-mouse
    }

    mouse {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "no-scroll"
    }

    // Uncomment this to make the mouse warp to the center of newly focused windows.
    warp-mouse-to-focus
    // focus-follows-mouse

    // Focus windows and outputs automatically when moving the mouse into them.
    // Setting max-scroll-amount="0%" makes it work only on windows already fully on screen.
    // focus-follows-mouse max-scroll-amount="0%"
}

cursor {
    // 16 20 22 24 28 32 40 48 56 64 72 80 88 96
    xcursor-theme "Bibata-Modern-Ice"
    xcursor-size 32

    hide-after-inactive-ms 2000
}

// ░░░░░   █▀█ █░█ ▀█▀ █▀█ █░█ ▀█▀   ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ░░░░░   █▄█ █▄█ ░█░ █▀▀ █▄█ ░█░   ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Outputs
// Remember to uncomment the node by removing "/-"!
/-output "HDMI-A-1" {
    // off
    mode "3840x2160"
    scale 1.5
    transform "normal"
    position x=0 y=0
    background-color "#282828"
}
/-output "HDMI-A-2" {
    // off
    mode "3840x2160"
    scale 1.5
    transform "normal"
    position x=3840 y=0
    background-color "#282828"
}

// ░░░░░   █▀ ▀█▀ ▄▀█ █▀█ ▀█▀ █░█ █▀█   ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ░░░░░   ▄█ ░█░ █▀█ █▀▄ ░█░ █▄█ █▀▀   ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
// See the binds section below for more spawn examples.
// spawn-at-startup "alacritty" "-e" "fish"

spawn-at-startup "xwayland-satellite"
environment {
    DISPLAY ":0"
}

spawn-at-startup "~/.config/niri/scripts/startup"
spawn-at-startup "mako"
spawn-at-startup "darkman"
spawn-at-startup "wl-paste" "--type" "text" "--watch" "cliphist" "store" // Stores only text data
// spawn-at-startup "wl-paste --type image --watch cliphist store" // Stores only image data
// spawn-at-startup "dbus-update-activation-environment" "--systemd" "WAYLAND_DISPLAY" "XDG_CURRENT_DESKTOP"
// spawn-at-startup "dbus-update-activation-environment" "--systemd" "WAYLAND_DISPLAY" "XDG_CURRENT_DESKTOP=sway"



// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some rounded corners.
// prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
// screenshot-path null

// ░░░░░   █▀ ▀█▀ █▄█ █░░ █▀▀   ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ░░░░░   ▄█ ░█░ ░█░ █▄▄ ██▄   ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

layout {
    gaps 13

    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "always", the focused column will always be centered.
    // - "on-overflow", focusing a column will center it if it doesn't fit
    //   together with the previously focused column.
    // center-focused-column "on-overflow"
    center-focused-column "never"
    // center-focused-column "always"

    always-center-single-column

    // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
    default-column-width { proportion 0.5; }
    preset-column-widths {
        proportion 0.2
        proportion 0.33333
        proportion 0.5
        proportion 0.66667
        proportion 0.8
    }
    preset-window-heights {
        proportion 0.2
        proportion 0.33333
        proportion 0.5
        proportion 0.66667
        proportion 0.8
    }

    focus-ring {
        // off
        width 11
        // active-color "#7fc8ff"
        // inactive-color "#505050"
        active-gradient from="#ef9f76" to="#e78284"
        inactive-gradient from="#838ba7" to="#51576d"
       
    }

    border {
        off
        width 8
        // active-color "#ffc87f"
        // inactive-color "#505050"
        active-gradient from="#ef9f76" to="#e78284"
        inactive-gradient from="#838ba7" to="#51576d"
       
    }

    struts {
        left -2
        right -2
        top -3
        bottom -1
    }

}

// Animation settings.
// The wiki explains how to configure individual animations:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Animations
animations {
    // Uncomment to turn off all animations.
    // off

    // Slow down all animations by this factor. Values below 1 speed them up instead.
    // slowdown 3.0
}

// ░░░░░   █░█░█ █ █▄░█ █▀▄ █▀█ █░█░█   █▀█ █░█ █░░ █▀▀ █▀   ░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// ░░░░░   ▀▄▀▄▀ █ █░▀█ █▄▀ █▄█ ▀▄▀▄▀   █▀▄ █▄█ █▄▄ ██▄ ▄█   ░░░░░░░░░░░░░░░░░░░░░░░░░░░░

// Window rules let you adjust behavior for individual windows.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules

window-rule {
    geometry-corner-radius 8
    clip-to-geometry true
}

// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // Use this instead if you want them visible on third-party screenshot tools.
    // block-out-from "screencast"
}

